#1(рефакторинг)
function calculateTotalPrice(orderedItems) {
  let totalPrice = 0;
  // Пиши код ниже этой строки

orderedItems.forEach(function calculateTotalPrice(orderedItem) {
    totalPrice += orderedItem;
  });
/////////////////////////////было
for (let i = 0; i < orderedItems.length; i += 1) {
    totalPrice += orderedItems[i];
  }
/////////////////////////
  // Пиши код выше этой строки
  return totalPrice;
}


#2
function filterArray(numbers, value) {
    const filteredNumbers = [];
    // Пиши код ниже этой строки
  
    numbers.forEach(function filterArray(number) {
    if (number > value) {
      filteredNumbers.push(number);
    }
  })
  
    // Пиши код выше этой строки
    return filteredNumbers;
  }

#3
function getCommonElements(firstArray, secondArray) {
    const commonElements = [];
    // Пиши код ниже этой строки
  
    firstArray.forEach(function getCommonElements(firstArr, secondArr) {
      if (secondArray.includes(firstArr)) {
        commonElements.push(firstArr);
      }
    });
  /////////////////////////////////

    for (let i = 0; i < firstArray.length; i += 1) {
      if (secondArray.includes(firstArray[i])) {
        commonElements.push(firstArray[i]);
      }
    }

///////////////////////////////////
    return commonElements;
    // Пиши код выше этой строки
  }


#4
// Пиши код ниже этой строки
///const calculateTotalPrice =(quantity, pricePerItem)=> {////

function calculateTotalPrice(quantity, pricePerItem) {
  // Пиши код выше этой строки
  return quantity * pricePerItem;
}

#5
const calculateTotalPrice = (quantity, pricePerItem) =>  quantity * pricePerItem;

#6
//////////////////
function calculateTotalPrice(orderedItems) {
  let totalPrice = 0;

  orderedItems.forEach(function (item) {
    totalPrice += item;
  });

  return totalPrice;
}

///////////
// Пиши код ниже этой строки
const calculateTotalPrice = (orderedItems)=> {
  let totalPrice = 0;

  orderedItems.forEach((item)=> {
    totalPrice += item;
  });

  return totalPrice;
}
// Пиши код выше этой строки


#7
// Пиши код ниже этой строки
const filterArray = (numbers, value)=> {
    const filteredNumbers = [];
  
    numbers.forEach((number)=> {
      if (number > value) {
        filteredNumbers.push(number);
      }
    });
  
    // Пиши код выше этой строки
    return filteredNumbers;
  }

#8
const getCommonElements = (firstArray, secondArray)=> {
    const commonElements = [];
  
    firstArray.forEach( (element)=> {
      if (secondArray.includes(element)) {
        commonElements.push(element);
      }
    });
  
    // Пиши код выше этой строки
    return commonElements;
  }


#9
function changeEven(numbers, value) {
  // Пиши код ниже этой строки
  const result = [];
  numbers.forEach(function changeEven(number) { 

    if (number % 2 === 0) {
        number = number + value;
    }
    result.push(number);
  })
  
    return result;
  
 
}

#10( массив длин названий планет)
const planets = ['Земля', 'Марс', 'Венера', 'Юпитер'];
// Пиши код ниже этой строки
const planetsLengths = planets.map((planet)=>planet.length);

#11(получаем названия книг) 
const books = [
    { title: 'Последнее королевство', author: 'Бернард Корнуэлл', rating: 8.38 },
    { title: 'На берегу спокойных вод', author: 'Роберт Шекли', rating: 8.51 },
    { title: 'Сон смешного человека', author: 'Федор Достоевский', rating: 7.75 },
    { title: 'Красна как кровь', author: 'Ли Танит', rating: 7.94 },
    { title: 'Враг Божий', author: 'Бернард Корнуэлл', rating: 8.67 }
  ];
  // Пиши код ниже этой строки
  
  const titles = books.map(book=> book.title);


#12(разглаженный массив [], а не [[]])
const books = [
    {
      title: 'Последнее королевство',
      author: 'Бернард Корнуэлл',
      genres: ['приключения', 'историческое']
    },
    {
      title: 'На берегу спокойных вод',
      author: 'Роберт Шекли',
      genres: ['фантастика']
    },
    {
      title: 'Красна как кровь',
      author: 'Ли Танит',
      genres: ['ужасы', 'мистика']
    }
  ];
  // Пиши код ниже этой строки
  
  const genres = books.flatMap(book=>book.genres);


#13(вернуть имена из фф)

const getUserNames = users => {
    return users.map(user=>user.name)

  };


№14
const getUserEmails = users => {
     return users.map(user=>user.email)

  };
#15() массив четный и нечетных чисел)
const numbers = [17, 24, 82, 61, 36, 18, 47, 52, 73];
// Пиши код ниже этой строки

const evenNumbers = numbers.filter((number)=>{
if (number % 2 === 0) {
       return number;
    }

});
const oddNumbers = numbers.filter((number)=>{
if (number % 2 !== 0) {
       return number;
    }

});
#16
////////////////////////////////////////////////////////
(Используя array.indexOf(course) выполняем поиск первого совпадения текущего элемента course и получаем его индекс в оригинальном массиве всех курсов. В параметре index хранится индекс текущего элемента course при переборе массива методом filter.

Если результат indexOf() и значение index равны - это уникальный элемент, потому что это первый раз когда такое значение встречается в массиве и на текущей итерации фильтр обрабатывает именно его.

# Массив всех курсов
['математика', 'физика', 'информатика', 'математика', 'физика', 'биология'];
Для элемента 'математика' под индексом 0:

indexOf() вернёт 0, потому что ищет первое совпадение.
Значение параметра index будет 0.
Они равны, значит это уникальный элемент.
Для элемента 'математика' под индексом 3:

indexOf() вернёт 0, потому что ищет первое совпадение.
Значение параметра index будет 3.
Они не равны, значит это повторяющийся - не уникальный элемент.)
/////////////////////////////////////////////
const books = [
    {
      title: 'Последнее королевство',
      author: 'Бернард Корнуэлл',
      genres: ['приключения', 'историческое']
    },
    {
      title: 'На берегу спокойных вод',
      author: 'Роберт Шекли',
      genres: ['фантастика', 'мистика']
    },
    {
      title: 'Красна как кровь',
      author: 'Ли Танит',
      genres: ['ужасы', 'мистика', 'приключения']
    }
  ];
  // Пиши код ниже этой строки
  const allGenres = books.flatMap(book=>book.genres);
  const uniqueGenres = allGenres.filter((book,index, books)=>books.indexOf(book)===index);

#17
const books = [
  { title: 'Последнее королевство', author: 'Бернард Корнуэлл', rating: 8.38 },
  { title: 'На берегу спокойных вод', author: 'Роберт Шекли', rating: 8.51 },
  { title: 'Сон смешного человека', author: 'Федор Достоевский', rating: 7.75 },
  { title: 'Красна как кровь', author: 'Ли Танит', rating: 7.94 },
  { title: 'Враг Божий', author: 'Бернард Корнуэлл', rating: 8.67 }
];

const MIN_RATING = 8;
const AUTHOR = 'Бернард Корнуэлл';
// Пиши код ниже этой строки

const topRatedBooks = books.filter((book)=> book.rating >=MIN_RATING);
const booksByAuthor = books.filter((book)=> book.author ===AUTHOR);

#18

const getUsersWithEyeColor = (users, color) => {
 return users.filter((user)=> user.eyeColor === color);

};

#19

const getUsersWithAge = (users, minAge, maxAge) => {
 return users.filter((user)=> user.age >= minAge && user.age <= maxAge);

};

#20
const getUsersWithFriend = (users, friendName) => {
  return users.filter((user)=> user.friends.includes(friendName) ) 
};

#21(вернуть имена друзей без повтора)
const getFriends = (users) => {
 const onlyFriend = users.flatMap(user=>user.friends);
  return onlyFriend.filter((user,index, users)=>users.indexOf(user)===index);
};


№22

const getActiveUsers = (users) => {
  
 return users.filter((user)=> user.isActive === true);
};

#23
const getInactiveUsers = (users) => {
   return users.filter((user)=> user.isActive !== true);
};

#24( метод find. до первого совпадения)

const books = [
  { title: 'Последнее королевство', author: 'Бернард Корнуэлл', rating: 8.38 },
  { title: 'На берегу спокойных вод', author: 'Роберт Шекли', rating: 8.51 },
  { title: 'Сон смешного человека', author: 'Федор Достоевский', rating: 7.75 },
  { title: 'Красна как кровь', author: 'Ли Танит', rating: 7.94 },
];
const BOOK_TITLE = 'Сон смешного человека';
const AUTHOR = 'Роберт Шекли';
// Пиши код ниже этой строки

const bookWithTitle = books.find((book)=> book.title ===BOOK_TITLE);
const bookByAuthor = books.find((book)=> book.author ===AUTHOR);


№25
const getUserWithEmail = (users, email) => {
   return users.find((user)=> user.email === email);
};

#26

const firstArray = [26, 94, 36, 18];
const secondArray = [17, 61, 23];
const thirdArray = [17, 26, 94, 61, 36, 23, 18];
// Пиши код ниже этой строки

const eachElementInFirstIsEven = firstArray.every((value)=> value%2===0);
const eachElementInFirstIsOdd = firstArray.every((value)=> value%2!==0);

const eachElementInSecondIsEven = secondArray.every((value)=> value%2===0);
const eachElementInSecondIsOdd = secondArray.every((value)=> value%2!==0);

const eachElementInThirdIsEven = thirdArray.every((value)=> value%2===0);
const eachElementInThirdIsOdd = thirdArray.every((value)=> value%2!==0);

#27

const isEveryUserActive = (users) => {
  return users.every((user)=> user.isActive ===true); 
};

#28( метод some. хотя бы один удовл условию)
const firstArray = [26, 94, 36, 18];
const secondArray = [17, 61, 23];
const thirdArray = [17, 26, 94, 61, 36, 23, 18];
// Пиши код ниже этой строки

const anyElementInFirstIsEven = firstArray.some((elem)=> elem %2 ===0);
const anyElementInFirstIsOdd = firstArray.some((elem)=> elem %2 !==0);

const anyElementInSecondIsEven = secondArray.some((elem)=> elem %2 ===0);
const anyElementInSecondIsOdd = secondArray.some((elem)=> elem %2 !==0);

const anyElementInThirdIsEven = thirdArray.some((elem)=> elem %2 ===0);
const anyElementInThirdIsOdd = thirdArray.some((elem)=> elem %2 !==0);


№29
const isAnyUserActive = users => {
  return users.some((user)=> user.isActive ===true) 
};

#30
const players = {
  mango: 1270,
  poly: 468,
  ajax: 710,
  kiwi: 244
};
const playtimes = Object.values(players); // [1270, 468, 710, 244]
// Пиши код ниже этой строки

const totalPlayTime = playtimes.reduce((total, value)=> {
return total+value;
},0);

// Пиши код выше этой строки
const averagePlayTime = totalPlayTime / playtimes.length;

#31
const players = [
  { name: 'Манго', playtime: 1270, gamesPlayed: 4 },
  { name: 'Поли', playtime: 469, gamesPlayed: 2 },
  { name: 'Аякс', playtime: 690, gamesPlayed: 3 },
  { name: 'Киви', playtime: 241, gamesPlayed: 1 },
];
// Пиши код ниже этой строки

const totalAveragePlaytimePerGame = players.reduce((total, player)=> {
return  total+player.playtime/player.gamesPlayed;
},0);

#32
const calculateTotalBalance = (users) => {
   return users.reduce((balance, user) => {
    return balance + user.balance;
  }, 0);
};
console.log(calculateTotalBalance(users))

#33(вернуть количество друзей,  число 14)
const getTotalFriendCount = users => {
  return users.reduce((friends, user) => {
    return friends+user.friends.length;
  }, 0);
  
};


#34( сортировка по возрастанию, по умолчанию)
const releaseDates = [2016, 1967, 2008, 1984, 1973, 2012, 1997];
const authors = [
  'Ли Танит',
  'Бернард Корнуэлл',
  'Роберт Шекли',
  'Федор Достоевский'
];
// Пиши код ниже этой строки

const ascendingReleaseDates = [...releaseDates].sort();

const alphabeticalAuthors = [...authors].sort();

№35
const releaseDates = [2016, 1967, 2008, 1984, 1973, 2012, 1997];
// Пиши код ниже этой строки

const ascendingReleaseDates = [...releaseDates].sort((a, b) => a - b);

const descendingReleaseDates = [...releaseDates].sort((a, b) => b-a);

#36
const authors = [
    'Ли Танит',
    'Бернард Корнуэлл',
    'Роберт Шекли',
    'Федор Достоевский',
    'Говард Лавкрафт'
  ];
  // Пиши код ниже этой строки
  
  const authorsInAlphabetOrder = [...authors].sort((a, b) => a.localeCompare(b));
  
  const authorsInReversedOrder = [...authors].sort((a, b) => b.localeCompare(a));

#37
const books = [
  { title: 'Последнее королевство', author: 'Бернард Корнуэлл', rating: 8.38 },
  { title: 'На берегу спокойных вод', author: 'Роберт Шекли', rating: 8.51 },
  { title: 'Сон смешного человека', author: 'Федор Достоевский', rating: 7.75 },
  { title: 'Красна как кровь', author: 'Ли Танит', rating: 7.94 },
  { title: 'Враг Божий', author: 'Бернард Корнуэлл', rating: 8.67 }
];
// Пиши код ниже этой строки

const sortedByAuthorName = [...books].sort(
  (first, second) => first.author.localeCompare(second.author)
);

const sortedByReversedAuthorName = [...books].sort(
  (first, second) => second.author.localeCompare(first.author)
);

const sortedByAscendingRating = [...books].sort(
  (first, second) => first.rating-second.rating
);

const sortedByDescentingRating = [...books].sort(
  (first, second) => second.rating-first.rating
);

#38
const sortByAscendingBalance = users => {
  return [...users].sort(
  (first, second) => first.balance-second.balance)
};

#39
const sortByDescendingFriendCount = users => {
   return [...users].sort(
  (first, second) => second.friends.length-first.friends.length)
};

#40

const sortByName = users => {
 return  [...users].sort(
  (first, second) => first.name.localeCompare(second.name))
};

#41
const books = [
  { title: 'Последнее королевство', author: 'Бернард Корнуэлл', rating: 8.38 },
  { title: 'На берегу спокойных вод', author: 'Роберт Шекли', rating: 8.51 },
  { title: 'Сон смешного человека', author: 'Федор Достоевский', rating: 7.75 },
  { title: 'Красна как кровь', author: 'Ли Танит', rating: 8.14 },
  { title: 'Сны В Ведьмином Доме', author: 'Говард Лавкрафт', rating: 8.67 }
];
const MIN_BOOK_RATING = 8;
// Пиши код ниже этой строки

const names = [...books].filter((book)=> book.rating >MIN_BOOK_RATING)
.map((book)=> book.author)
.sort((first, second) =>first.localeCompare(second));

#42
const getNamesSortedByFriendCount = users => {
 return [...users].sort((first, second) => first.friends.length - second.friends.length)
.map((user)=> user.name)
};

#43
const getSortedFriends = users => {
 return users.flatMap(user=>user.friends)
  .filter((user,index, users)=>users.indexOf(user)===index)
 .sort((first, second) => first.localeCompare(second))
};

#44

const getTotalBalanceByGender = (users, gender) => {
   return users.filter((user) => user.gender === gender)
    .reduce((total, user) => total+user.balance,0)
};
